Nicktvdd: 
Create a page for showing a patient's full information in the frontend.

The user should be able to access a patient's information by clicking the patient's name.

Fetch the data from the endpoint created in the previous exercise ( patientsRouter.get('/api/patients/:id', (req, res) => {
    const id = req.params.id;
    const patient = data.find(p => p.id === id);
    if (patient) {
        res.send(patient);
    } else {
        res.status(404).send('Patient not found');
    }
});)

You may use MaterialUI for the new components but that is up to you since our main focus now is TypeScript.

The result could look like this:

GitHub Copilot: To create a page for showing a patient's full information, we will need to:

1. Create a new component for the patient's information.
2. Fetch the patient's data from the API endpoint.
3. Display the fetched data in the component.

Here is a simple example of how you can do this using React, TypeScript, and Material-UI:

```tsx
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { Container, Typography } from '@material-ui/core';

interface Patient {
  id: string;
  name: string;
  // Add other patient properties here
}

const PatientInfo: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [patient, setPatient] = useState<Patient | null>(null);

  useEffect(() => {
    fetch(`/api/patients/${id}`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Patient not found');
        }
        return response.json();
      })
      .then(data => setPatient(data))
      .catch(error => console.error(error));
  }, [id]);

  if (!patient) {
    return <Typography>Loading...</Typography>;
  }

  return (
    <Container>
      <Typography variant="h4">{patient.name}</Typography>
      {/* Display other patient properties here */}
    </Container>
  );
};

export default PatientInfo;
```

This component uses the `useParams` hook from `react-router-dom` to get the patient's ID from the URL. It then uses the `useEffect` hook to fetch the patient's data from the API when the component is first rendered or when the ID changes. The fetched data is stored in the `patient` state variable and displayed in the component.

You can use this component in your application by including it in your router:

```tsx
import { BrowserRouter as Router, Route } from 'react-router-dom';
import PatientInfo from './PatientInfo';

// ...

<Router>
  {/* Other routes */}
  <Route path="/patients/:id" component={PatientInfo} />
</Router>
```

With this setup, when a user navigates to `/patients/<id>`, they will see the information for the patient with that ID.